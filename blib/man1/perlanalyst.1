.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.37
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLANALYST 1"
.TH PERLANALYST 1 "2011-10-24" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
perlanalyst \-\- analyse your Perl documents (without running them)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  perlanalyst [OPTIONS] [FILES OR DIRECTORIES]
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Perlanalyst is a tool to analyse your Perl documents. This is done via
static analysis, e.g. the code is analysed without running it.
.PP
The most simple usage of this tool is to ask a question about the sources
and the tool tells you the answer.
.SH "USAGE EXAMPLES Before getting into all the gory details, here are some basic usage examples to help get you started."
.IX Header "USAGE EXAMPLES Before getting into all the gory details, here are some basic usage examples to help get you started."
.Vb 3
\&  # find all subroutine declarations, recursively process all Perl
\&  # files beneath directory
\&  perlanalyst -all Sub
.Ve
.PP
.Vb 2
\&  # the same, but show only the declaration of the subroutine "foo"
\&  perlanalyst -all Sub --filter Name --filter-argument foo
.Ve
.PP
.Vb 2
\&  # the same, but asked as a question
\&  perlananalyst --question Sub::Name --question-argument foo
.Ve
.PP
.Vb 2
\&  # the same, but look in another directory
\&  perlananalyst -q Sub::Name -Q foo ~/perl5/lib/perl5/Test
.Ve
.SH "FILE SELECTION"
.IX Header "FILE SELECTION"
The Perlanalyst examines only files that end in \f(CW\*(C`.pl\*(C'\fR, \f(CW\*(C`.pm\*(C'\fR or \f(CW\*(C`.t\*(C'\fR except
if you specify the file names directly on the command line.
.SH "DIRECTORY SELECTION"
.IX Header "DIRECTORY SELECTION"
The program descends through the directory tree of the starting directories
specified. If no file or directory is specified, perlanalyst descends through
the current directory.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-a \f(BI\s-1NAME\s0\fB\fR, \fB\-\-analysis \f(BI\s-1NAME\s0\fB\fR" 4
.IX Item "-a NAME, --analysis NAME"
Run the analysis of the given \fI\s-1NAME\s0\fR. 
.IP "\fB\-f \f(BI\s-1NAME\s0\fB\fR, \fB\-\-filter \f(BI\s-1NAME\s0\fB\fR" 4
.IX Item "-f NAME, --filter NAME"
Send the results of the analysis through this filter. Can be specified
multiple times, the filters are run in the order they appear one the command
line.
.IP "\fB\-F \f(BI\s-1ARGUMENTS\s0\fB\fR, \fB\-\-filter\-argument \f(BI\s-1ARGUMENTS\s0\fB\fR" 4
.IX Item "-F ARGUMENTS, --filter-argument ARGUMENTS"
Set the arguments for the filter you specified.
.IP "\fB\-q \f(BI\s-1NAME\s0\fB\fR, \fB\-\-question \f(BI\s-1NAME\s0\fB\fR" 4
.IX Item "-q NAME, --question NAME"
Ask the question of that name.
.IP "\fB\-Q \f(BI\s-1ARGUMENTS\s0\fB\fR, \fB\-\-question\-arguments \f(BI\s-1ARGUMENTS\s0\fB\fR" 4
.IX Item "-Q ARGUMENTS, --question-arguments ARGUMENTS"
Set the arguments for the question.
.SH "CONCEPTS"
.IX Header "CONCEPTS"
.Sh "Analysis"
.IX Subsection "Analysis"
An analysis examines a file in a simple way and returns a list of results.
For example, a very simple analysis is: Give me all declarations of lexical
variables.
.Sh "Filter"
.IX Subsection "Filter"
A filter takes the results of an analysis and ... um ... filters it. An example
would be: Give me all lexical variables with the name \*(L"foo\*(R".
.Sh "Question"
.IX Subsection "Question"
A question is an analysis followed by one or more filters. 
.SH "STATUS"
.IX Header "STATUS"
This is a proof of concept that was hacked together whilst enjoying the
13th German Perl Workshop in Frankfurt. Hacking was done on the train to and
from Frankfurt and at the workshop itself.
.SH "PLAN"
.IX Header "PLAN"
.IP "Add database support." 4
.IX Item "Add database support."
The results of each analysis will be written to a database. Filters run
on the data that was read from the database so analysis and questions can
be performed in different steps.
.IP "More basic level analyses, filters and questions." 4
.IX Item "More basic level analyses, filters and questions."
Write more basic analyses using \s-1PPI\s0 and file operations. Write more filters
and combine them in questions.
.IP "Introduce higher level analysis, filters and questions." 4
.IX Item "Introduce higher level analysis, filters and questions."
Higher level anaylses combine results from lower level analyses. For example,
to see what package variables are declared, we have to know where the keywords
\&\f(CW\*(C`package\*(C'\fR and \f(CW\*(C`our\*(C'\fR are used and in what scope.
.IP "Run analyses only once per unmodified file." 4
.IX Item "Run analyses only once per unmodified file."
Perform an analyses once to get that initial data for a file and then only
if it was modified.
.IP "Build other tools around it." 4
.IX Item "Build other tools around it."
The first one might be a simple web application (using Dancer?) to browse
the database (using Dancer::Plugin::Database?).
.Sp
The second one might be a simple RESTful server (using
Dancer::Plugin::REST?).
.Sp
The third one could be some kind of connection to Perl::Critic. Since this
feels so natural and obvious to me, it might actually be the first one that
should be built.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1PPI\s0 is used for parsing the Perl documents.
.PP
Perl::Critic is a different kind of tool. It has the knowledge of experienced
perl programmers built in and tells you if your code smells.
.SH "AUTHOR"
.IX Header "AUTHOR"
Gregor Goldbach, glauschwuffel@nomaden.org
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2011 Gregor Goldbach
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the Artistic License v2.0.
